[project]
name = "rivac-cv"
version = "0.1.0"
description = "Sistema de Monitoramento por Visão Computacional para ambientes de varejo"
readme = "README.md"
requires-python = ">=3.8"
authors = [
    { name = "Equipe RIVAC", email = "dev@rivac-cv.com" }
]
license = { text = "MIT" }
keywords = ["computer-vision", "object-detection", "tracking", "retail", "yolo", "opencv"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
]

# Dependências principais do projeto
dependencies = [
    # Core ML/CV frameworks
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "ultralytics>=8.0.0",
    "opencv-python>=4.8.0",
    "numpy>=1.24.0",
    "pillow>=10.0.0",
    
    # Web interface e visualização
    "streamlit>=1.28.0",
    "plotly>=5.15.0",
    "matplotlib>=3.7.0",
    
    # Manipulação de dados
    "pandas>=2.0.0",
    "pyyaml>=6.0",
    "sqlalchemy>=2.0.0",
    
    # Utilitários
    "python-dotenv>=1.0.0",
    "pathlib>=1.0.0",
]

# Dependências opcionais organizadas por grupos de funcionalidade
[project.optional-dependencies]
# Desenvolvimento e testes
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

# Funcionalidades avançadas de CV
advanced-cv = [
    "opencv-contrib-python>=4.8.0",
    "scikit-image>=0.21.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
]

# Tracking avançado
tracking = [
    "filterpy>=1.4.5",  # Para filtros de Kalman
    "lap>=0.4.0",       # Para algoritmo húngaro
]

# Processamento de vídeo
video = [
    "imageio>=2.31.0",
    "imageio-ffmpeg>=0.4.8",
    "ffmpeg-python>=0.2.0",
]

# Deploy em produção
production = [
    "gunicorn>=21.0.0",
    "uvicorn>=0.23.0",
    "redis>=4.6.0",
    "celery>=5.3.0",
]

# Todas as dependências opcionais
all = [
    "rivac-cv[dev,advanced-cv,tracking,video,production]",
]

# Pontos de entrada da aplicação
[project.scripts]
rivac-cv = "main:main"
rivac-cv-streamlit = "streamlit_app:main"

# URLs do projeto
[project.urls]
Homepage = "https://github.com/usuario/rivac-cv"
Documentation = "https://rivac-cv.readthedocs.io/"
Repository = "https://github.com/usuario/rivac-cv.git"
Issues = "https://github.com/usuario/rivac-cv/issues"

# Sistema de build (usando hatchling para compatibilidade)
[build-system]
requires = ["hatchling>=1.20.0"]
build-backend = "hatchling.build"

# Configurações específicas do UV
[tool.uv]
# Gestão de dependências e ambientes
managed = true
package = false  # Projeto tipo aplicação, não biblioteca

# Configurações de resolução de dependências
environments = [
    "sys_platform == 'win32'",
    "sys_platform == 'linux'", 
    "sys_platform == 'darwin'",
]

# Fontes de dependências personalizadas
[tool.uv.sources]
# Exemplo: usar versão específica do PyTorch para CUDA
# torch = { index = "pytorch-cuda" }

# Índices personalizados (se necessário)
# [[tool.uv.index]]
# name = "pytorch-cuda"
# url = "https://download.pytorch.org/whl/cu121"

# Configurações do pip do UV
[tool.uv.pip]
# Usar links simbólicos quando possível para economizar espaço
link-mode = "symlink"  # ou "hardlink" para Windows

# Não construir isoladamente para alguns pacotes problemáticos
no-build-isolation-package = []

# Configurações de cache
cache-dir = ".uv-cache"
cache-keys = [
    { file = "pyproject.toml" },
    { file = "uv.lock" }
]

# Configurações do Black (formatação de código)
[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Diretórios a excluir
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Configurações do MyPy (type checking)
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Configurações do pytest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marca testes que demoram para executar",
    "integration: marca testes de integração",
    "gpu: marca testes que requerem GPU",
]

# Configurações de cobertura
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Configurações do Ruff (linting)
[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011", "B018"]

[tool.ruff.lint.isort]
known-first-party = ["src"]

# Configurações do Hatch (build backend)
[tool.hatch.version]
path = "src/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/config",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]
